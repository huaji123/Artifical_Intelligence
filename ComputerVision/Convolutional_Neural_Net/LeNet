import paddle
import numpy as np
# 处理的图像是28*28*1，只有一个通道所以选择二维
# Conv2D:卷积层 MaxPool2D:最大池化层 Linear:线性变化层
from paddle.nn import Conv2D, MaxPool2D, Linear, Conv3D

# 组网
import paddle.nn.functional as F


# 定义LeNet网络结构
class LeNet(paddle.nn.Layer):
    def __init__(self, num_class=1):
        super(LeNet, self).__init__()
        # 创建第一个卷积层和池化层
        self.c1 = Conv2D(in_channels=1, out_channels=6, kernel_size=5)
        self.m1 = MaxPool2D(kernel_size=2, stride=2)
        # 尺寸的逻辑：池化层为改变通道数：当前通道数为6
        # 创建第二个卷积层
        self.c2 = Conv2D(in_channels=6, out_channels=16, kernel_size=5)
        self.m2 = MaxPool2D(kernel_size=2, stride=2)
        # 创建第三个卷积层
        self.c3 = Conv2D(in_channels=16, out_channels=120, kernel_size=4)
        # 尺寸的逻辑：输入层将数据拉平[B,C, H, W] -> [B, C*H*W]
        # 输入size是[28,28],经过三次卷积和两次池化之后，C*H*W=120
        self.fc1 = Linear(in_features=120, out_features=64)
        # 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数
        self.fc2 = Linear(in_features=64, out_features=num_class)

    def forward(self, x):
        x = self.c1(x)
        # 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化
        x = F.sigmoid(x)
        x = self.m1(x)
        x = F.sigmoid(x)
        x = self.c2(x)
        x = self.m2(x)
        x = self.c3(x)
        # 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -> [B,C*H*W]
        x = paddle.reshape(x, [x.shape[0], -1])
        x = self.fc1(x)
        x = F.sigmoid(x)
        x = self.fc2(x)

        return x

# 定义LeNet网络结构
class LeNet(paddle.nn.Layer):
    def __init__(self, num_class=1):
        super(LeNet, self).__init__()
        self.layer1 = N.Sequential(
            # 创建第一个卷积层和池化层
            N.Conv2D(in_channels=1, out_channels=6, kernel_size=5),
            N.Sigmoid(),
            N.MaxPool2D(kernel_size=2, stride=2),

        )
        self.layer2 = N.Sequential(
            # 尺寸的逻辑：池化层为改变通道数：当前通道数为6
            # 创建第二个卷积层
            N.Sigmoid(),
            N.Conv2D(in_channels=6, out_channels=16, kernel_size=5),
            N.MaxPool2D(kernel_size=2, stride=2)
        )
        self.layer3 = N.Sequential(
            # 创建第三个卷积层
            N.Conv2D(in_channels=16, out_channels=120, kernel_size=4)
        )
        self.layer4 = N.Sequential(
            # 尺寸的逻辑：输入层将数据拉平[B,C, H, W] -> [B, C*H*W]
            # 输入size是[28,28],经过三次卷积和两次池化之后，C*H*W=120
            N.Linear(in_features=120, out_features=64),
            N.Sigmoid(),
            # 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数
            N.Linear(in_features=64, out_features=num_class)
        )

    def forward(self, x):
        # 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        # 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -> [B,C*H*W]
        x = paddle.reshape(x, [x.shape[0], -1])
        x = self.layer4(x)

        return x
模型链接：https://pic2.zhimg.com/v2-b902fa7714dadf0a31d0b0d2dd6c72fa_r.jpg?source=172ae18b
